from map import Map
from utlis import Utlis
from building import *
import csv

class GameManager():

    def __init__(self, buildingDict):
        self.buildingDict = buildingDict
        self.starting_coins = 16
        self.current_coins = self.starting_coins
        self.map = Map(20, 20)

    def playGame(self):
        # 2.3.1. Initialize game variables - Put running numbers in here
        highscores = []
        # 2.3.2. Display game menu
        while self.current_coins > 0 and (self.map.column * self.map.row) < 401 :
            self.map.draw_map()
            print(f"Turn Number: {len(self.map.map) + 1}")
            print(f"Coins: {self.current_coins}")
            print("\n1 Build a building\n2 Save Game\n3 See Current Score\n0 Exit Game")

            # 2.3.3. Process game menu choice (You can use a function here)
            sgChoice = Utlis.get_int("\nYour choice: ")

            if sgChoice == 1:
                # First function validates user input
                building = BuildingUtils.selectBuilding(self.buildingDict, self.map)

                # Second function builds the building on the map
                BuildingUtils.buildBuilding(building, self.map)
                
                self.current_coins = self.calculate_coins()
            
            # 2.3.8. Save game
            elif sgChoice == 2:
                self.save_game()
            elif sgChoice == 3:
                score = sum([building.calculate_score(self.map) for building in self.map.map.values()])
                    
                print(f"Current Score: {score}")
                
            elif sgChoice == 0:
                return 0
            else:
                print("Invalid choice!")
        
        #Endgame
        #Calculate finale score

        score = sum([building.calculate_score(self.map) for building in self.map.map.values()])
        if len(highscores) < 11:
            name = input("Please enter your name (Max 20 characters) : ")
            if len(name) > 20:
                print("Name exceeded 20 characters!") 
            else:
                pass

        with open('leaderboard.csv','a') as csv_file:
            csv_file.write("\n" + name + "," + str(score) + ",")
            csv_file.close()


        

        



        
    def calculate_coins(self):
        # starting coins - number of turns + sum of coins generated by the building
        return self.starting_coins - len(self.map.map) + sum([building.calculate_coins(self.map) for building in self.map.map.values()])

    def save_game(self):
        savefile = open("./map.csv", "w")
        savefile.write(str(map))
    
    def load_game(self):
        pass
    
    def displayhighScores(self):
        # 4.1. Display high scores menu  
        # 4.2. Display high scores
        playername = []
        highscores = []
        leaderboard = open("leaderboard.csv", "r")
        board_list = leaderboard.read().split(",")
        board_list.pop(-1)  # When saving the file a comma would added to the back of the list which would result in an empty string

        for i in range(len(board_list)):
            if i == 0:
                playername.append(board_list[i].strip())

            elif i % 2 == 0:
                playername.append(board_list[i].strip())

            else:
                highscores.append(board_list[i])

        print("--------- HIGH SCORES ---------")
        print("{:<3} {:<22} {:<5}".format("Pos", "Player", "Score"))
        print("{:<3} {:<22} {:<5}".format("---", "------", "-----"))
        for i in range(10):
            print("{:>2}. {:<22} {:>5}".format(i + 1, playername[i] if i < len(playername) else "", highscores[i] if i < len(highscores) else ""))

        print("-------------------------------")

            #for line in f:
                #print(line.strip())

    
    # 1. Display main menu
    def mainmenu(self):
        print("Welcome, mayor of NP City!\n--------------------------\n1 Start new game\n2 Load saved game\n3 Show high scores\n \n0 Exit Game")
    
    